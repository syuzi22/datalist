{"version":3,"sources":["Contacts.js","UserData.js","DownButton.js","redux/constants.js","Sort.js","redux/actions.js","UserList.js","App.js","redux/reducer/users.js","redux/reducer/status.js","redux/reducer/sort.js","redux/reducer/index.js","redux/store.js","index.js"],"names":["connect","state","ownProps","id","email","users","tel","className","rowHeight","params","firstName","lastName","message","timestamp","date","Date","style","height","toLocaleDateString","Down","handler","onClick","LOAD_USERS","START_FETCHING","LOAD_ERROR","SORT_ASC","SORT_DESC","SORT_ASC_ORDER","SORT_DESC_ORDER","dateSort","sort","dispatch","sortASC","type","sortDESC","cursor","visibleRows","rootRef","React","useRef","useState","start","setStart","inputValue","setInputValue","filterUsers","inputLowercase","toLowerCase","filter","user","indexOf","useLayoutEffect","rootRefCurrent","current","onScroll","e","Math","min","length","floor","target","scrollTop","addEventListener","removeEventListener","value","onChange","placeholder","scrollHeight","overflow","ref","a","b","millis","sortUsers","slice","map","k","max","getBottomHeight","loaded","status","isFetching","error","Object","values","loadUsers","getState","fetch","API_BASE_URI","then","res","json","response","arrToMap","arr","reduce","acc","item","reducer","action","parse","initialState","combineReducers","enhancer","applyMiddleware","thunk","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.3da164df.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Contacts = ({email, tel}) => {\n    return (\n        <div className=\"user_list__tooltip\">\n            <span>Email: {email}</span>{' '}\n            <span>Phone: {tel}</span>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const id = ownProps.id\n    return ({\n        email: state.users[id]['email'],\n        tel: state.users[id]['phone']\n    });\n}\n\nexport default connect(mapStateToProps)(Contacts);","import React from 'react';\nimport { connect } from 'react-redux';\nimport Contacts from './Contacts';\n\nconst UserData = ({id, firstName, lastName, message, timestamp, rowHeight}) => {\n    const date = new Date(timestamp);\n    return (\n        <tr className=\"user_list__row\" style={{ height: rowHeight }} >\n            <td className=\"user_list__cell user_list__cell__name\">\n                {firstName} {lastName}\n                <Contacts id={id}/>\n            </td>\n            <td className=\"user_list__cell user_list__cell__ellipsis user_list__cell__messsage\">\n                {message}\n            </td>\n            <td className=\"user_list__cell user_list__cell__time\">\n                {date.toLocaleDateString()}\n            </td>\n        </tr>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return ({\n        rowHeight: state.params.rowHeight,\n    });\n}\n\nexport default connect(mapStateToProps)(UserData);","import React from 'react';\n\nconst Down = ({handler}) => {\n    return (\n        <button className=\"user_list__controls_button\" onClick={handler}>\n            Down\n        </button>\n    );\n};\n\nexport default Down;","export const LOAD_USERS = 'LOAD_USERS';\nexport const START_FETCHING = 'START_FETCHING';\nexport const LOAD_ERROR = 'LOAD_ERROR';\nexport const SORT_ASC = 'SORT_ASC';\nexport const SORT_DESC = 'SORT_DESC';\nexport const SORT_ASC_ORDER = 'asc';\nexport const SORT_DESC_ORDER = 'desc';\nexport const API_BASE_URI = 'http://www.filltext.com';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { sortASC, sortDESC } from './redux/actions.js';\nimport { SORT_ASC_ORDER, SORT_DESC_ORDER } from './redux/constants.js';\n\nconst Sort = ({sortASC, sortDESC, dateSort}) => {\n    const clickHandler = () => {\n        if (dateSort === SORT_ASC_ORDER || dateSort === null) {\n            sortDESC();\n        } else if (dateSort === SORT_DESC_ORDER || dateSort === null) {\n            sortASC();\n        }\n    }\n    return (\n        <span className=\"sort\">\n            Sort by:{' '}\n            <b style={{cursor: 'pointer'}} className={`sort__arrow sort__arrow_${ dateSort }`} onClick={clickHandler}>Date</b>\n        </span>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return ({\n        dateSort: state.sort.date\n    });\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sortASC: () => dispatch(sortASC()),\n        sortDESC: () => dispatch(sortDESC()),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);","import { LOAD_USERS, START_FETCHING, LOAD_ERROR, SORT_ASC, SORT_DESC, API_BASE_URI } from './constants';\n\nexport const loadUsers = () => async (dispatch, getState) => {\n\n    const state = getState();\n    if (!state.status.isFetching) {\n        dispatch({\n            type: START_FETCHING\n        })\n    }\n\n    const response = await fetch(API_BASE_URI + '/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-приложение для отображения данных в виде списка. xx-приложение для отображения данных в виде списка. xx%7D&message=%7Blorem%7C32%7D&timestamp={date}&delay=3')\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }else {\n                return null;\n            }\n    });\n\n    if (!response) {\n        dispatch({\n            type: LOAD_ERROR,\n        })\n    } else {\n        dispatch({\n            type: LOAD_USERS,\n            response\n        })\n    }\n\n};\n\nexport const sortASC = () => ({\n    type: SORT_ASC\n});\n\nexport const sortDESC = () => ({\n    type: SORT_DESC\n});\n","import React from 'react';\nimport UserData from './UserData';\nimport { connect } from 'react-redux';\nimport Down from './DownButton';\nimport Sort from './Sort';\nimport { SORT_ASC_ORDER } from './redux/constants.js';\n\nconst UserList = ({users, rowHeight, visibleRows, dateSort}) => {\n\n    const rootRef = React.useRef();\n    const [start, setStart] = React.useState(0);\n    const [inputValue, setInputValue] = React.useState('')\n\n    const filterUsers = (users) => {\n        const inputLowercase = inputValue.toLowerCase();\n        return users.filter(user => user.firstName.toLowerCase().indexOf(inputLowercase) !== -1\n            || user.lastName.toLowerCase().indexOf(inputLowercase) !== -1);\n    };\n\n    const sortUsers = (users) => {\n        if (!dateSort) {\n            return users;\n        }\n        users.sort((a, b) => {\n            if (dateSort === SORT_ASC_ORDER) {\n                return a.millis - b.millis;\n            }\n            return b.millis - a.millis;\n        })\n        return users;\n    };\n\n    const getTopHeight = () => {\n        return rowHeight * start;\n    }\n\n    const getBottomHeight = () => {\n        const k = filterUsers(users).length - (start + visibleRows + 1);\n        return rowHeight * Math.max(0, k);\n    }\n\n    const downClickHandler = () => {\n        rootRef.current.scrollTop = rootRef.current.scrollHeight;\n    };\n\n    const inputHandler = (e) => {\n        setInputValue(e.target.value)\n    };\n\n    React.useLayoutEffect(() => {\n        const rootRefCurrent = rootRef.current;\n        function onScroll(e) {\n            setStart(Math.min(\n                users.length - visibleRows - 1,\n                Math.floor(e.target.scrollTop / rowHeight)\n            ));\n            }\n            rootRefCurrent.addEventListener('scroll', onScroll);\n\n            return () => {\n                rootRefCurrent.removeEventListener('scroll', onScroll);\n            }\n    }, [users.length, visibleRows, rowHeight]);\n\n    return (\n        <div className=\"user_list\">\n            <div className=\"user_list__controls\">\n                <input value={inputValue} onChange={inputHandler} placeholder=\"Filter\" />\n                <div className=\"user_list__controls_r\">\n                    { (start < users.length - visibleRows - 1) ? <Down handler={downClickHandler}/> :  ''}\n                    <Sort />\n                </div>\n            </div>\n            <div style={{ height: rowHeight * visibleRows + 1, overflow: 'auto' }} ref={rootRef}>\n                <div style={{ height: getTopHeight() }}></div>\n                <table>\n                    <tbody >\n                        {sortUsers(filterUsers(users)).slice(start, start + visibleRows + 1)\n                            .map(user =>\n                            <UserData\n                                key={user.id}\n                                id={user.id}\n                                firstName={user.firstName}\n                                lastName={user.lastName}\n                                message={user.message}\n                                timestamp={user.timestamp}\n                            />)}\n                    </tbody>\n                </table>\n                <div style={{ height: getBottomHeight() }}></div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return ({\n        rowHeight: state.params.rowHeight,\n        visibleRows: state.params.visibleRows,\n        dateSort: state.sort.date\n    });\n}\n\nexport default connect(mapStateToProps)(UserList);","import React from 'react';\nimport UserList from './UserList';\nimport { connect } from 'react-redux';\nimport { loadUsers } from './redux/actions.js';\n\nconst App = ({ loaded, loadUsers, error, users, isFetching }) => {\n\nif (error) {\n  return (<div>Information not found</div>);\n}\n\nif (!loaded) {\n  loadUsers();\n}\n\nreturn (\n    <>\n      <h1>React datalist</h1>\n      {isFetching ? <h2>Loading...</h2> : <UserList users={users}/>}\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return ({\n    loaded: state.status.loaded,\n    isFetching: state.status.isFetching,\n    error: state.status.error,\n    users: Object.values(state.users)\n  });\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadUsers: () => dispatch(loadUsers()),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { LOAD_USERS } from './../constants';\n\nconst arrToMap = (arr) =>  arr.reduce((acc, item) => ({ ...acc, [item.id]: item }), {});\n\nconst reducer = (state = {}, action) => {\n    switch (action.type) {\n        case LOAD_USERS:\n            const users = arrToMap(action.response.map(user => ({...user, millis: Date.parse(user.timestamp)})));\n            return {\n                ...state,\n                ...users,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { LOAD_USERS,  START_FETCHING, LOAD_ERROR} from './../constants';\n\nconst initialState = {\n    loaded: false,\n    isFetching: false,\n    error: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case START_FETCHING:\n            return {\n                ...state,\n                isFetching: true\n            };\n        case LOAD_USERS:\n            return {\n                ...state,\n                loaded: true,\n                isFetching: false\n            };\n        case LOAD_ERROR:\n            return {\n                ...state,\n                error: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { SORT_ASC, SORT_DESC, SORT_ASC_ORDER, SORT_DESC_ORDER } from './../constants';\n\nconst initialState = {\n    date: null\n};\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SORT_ASC:\n            return {\n                ...state,\n                date: SORT_ASC_ORDER\n            };\n        case SORT_DESC:\n            return {\n                ...state,\n                date: SORT_DESC_ORDER\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport users from './users';\nimport status from './status';\nimport sort from './sort';\n\nconst reducer = combineReducers({\n    params: () => ({\n        rowHeight: 40,\n        visibleRows: 10\n    }),\n    status,\n    users,\n    sort\n});\n\nexport default reducer;","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst enhancer = applyMiddleware(\n    thunk\n);\n\nexport default createStore(reducer, enhancer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider> ,\n  document.getElementById('root')\n);"],"sourceRoot":""}